#!/bin/bash

################################################################################
#
# Wine-node Manager Script
#
# the idea is to create psuedo-prefixes that are what i will refer to as a "wine-nodes". Each wine-node is a 
# minimal/modified wine prefix - derived/cloned from *and* hooks into a pre-exisiting, configured and
# fully-functioninal wine-prefix ~ That i will refer to as the "master-node". The idea is very similar to what the 'Qubes OS' guys
# are doing with Zen/virtualization, reducing the size of VMs by using templates (in this case, the master-node is the template).
#
# the master-node has all of your wine data / applications; it is your 'real' wine prefix [created by winecfg/you].
# The wine-nodes have what is the minimal requirement to be separated and somewhat sandboxed, but still use 
# your master-node / prefix. [Intentionally so ~ rather than having multiple prefix/installations of the same apps]. 
# This can allow for interesting things like overcoming 'singleton apps'; that is apps that hold a mutex or disallow running
# multiple instances. (Guitar Rig, for example).
#
# A wine-node's layout is like so;
# 
# ../prefix_name/->/dosdevices/ 
#                ->/drive_c/->/Program Files              [SPECIAL CASE]
#                           ->/Program Files (x86)        [SPECIAL CASE]
#                           ->/users                      [Master-node] or [SPECIAL CASE] - some usage WILL require the latter.
#                           ->/windows/                   [copy / NO symlink]
#                                   ->/command            [copy / NO symlink]
#                                   ->/system             [copy / NO symlink]
#                                   ->/system32           [copy / NO symlink]
#                                   ->/syswow64           [copy / NO symlink]
#                                   ->/Installer [symlink to Master node]
#                                   ->/temp      [symlink to Master node]
#                                   ->/winsxs    [symlink to Master node] 
#                                   ... 
#
# Obviously, there can be / are other folders - but the above listed folders are the important / needed ones for a functional node. 
# Here is a quick breakdown of the above map;
#
# 1). the [Keep / NO symlink] folders contain everything for a unique node
#
# 2). [master-node] symlinking allows to launch a node tied to it's master node + avoids having to setup multiple prefix's 
#     running the same apps. [as does some of the specifics of the [SPECIAL CASE]s]   
# 
# 3). [SPECIAL CASE] is a combination of 1) and 2) and is meant for being able to manage app data that you want per-node,
#     to avoid apps sharing lock files, app-data, etc. [this is essentially a psuedo-multi-user environment. But there is 
#     actually only one user. The idea here is to; 
#     
#  a. create dirs / data structures [SPECIAL CASE folders; Program Files, Common Files ,etc]
#  b. populate the data structures using master-node symlinks where applicable, then
#  c. for any data that is NOT to be shared, you create a data node [for each node] then symlink to it.
#  d. duplicate [rather than symlink] registry, so nodes cannot affect/corrupt master-node wine registries.
#
# The symlinks of each node point back to the original/prefix; the apps/data on the master node. The end result;
# 
# - multiple prefixes that share some core data
# - you can run multiple 'singleton apps'. ie: apps that try and hold a mutex or disallow running multiple instances
# - you can manage installations from a single prefix
# - the wine-nodes can be 'throw away' or a testing ground, in some cases. 
#
# 
# Prerequisites: 
#
# 1). You must first create a CONTAINER and modify the below 'CONTAINER=' to point to your container's PATH 
#     this script won't create containers, as it's meant for creating a wine-node, operating within an existing container.
# 2). You must create and configure a wine-prefix *or* move an existing/working wine-prefix into your CONTAINER 
# 3). You must modify WINE_NODE= to reflect the name you want for your node. note: this step needs to be repeated for
#     every wine-node you plan on creating. [one per cpu core is more than enough]
# 4). the [SPECIAL CASE]s must be handled with care - depending on what you have installed, this script needs to be adjusted,
# in the "SPECIAL CASE" section [down below].

# script psuedo-Functions

function func_freshHeadr(){

clear

sleep 0.2

tput setab 0
}

function func_pause(){
   read -p "$*"
}


tput setab 0 && func_freshHeadr


CONTAINER="/winebox"                      # path to the container/folder for your wine-prefix[es] + wine-node(s)
MASTER_NODE="master-node"                 # master node / wine-prefix we plan to symlink or copy data from, for node
WINE_NODE="node"$NODE""                   # wine-node by name, specify at commandline - easier for multiple runs [use NODE=X wine-node-config]
X64="drive_c/Program Files"
X86="drive_c/Program Files (x86)"

################################################################################
#
# Start up, grief description and hello.
#

echo -e "\e[1;34m     ------------------------------------"
echo -e "\e[1;34m     ---\e[1;37mWine Node Manager Script\e[1;34m---"
echo -e "\e[1;34m     ------------------------------------\n"

echo -e "  Please read the wine-node script for usage instructions." 
echo -e "  This script requires modification!\n\n"

sleep 1

###################################
#
# cd into container, prepare directory for a wine-node
#

cd "$CONTAINER"

mkdir "$WINE_NODE"

echo -e "  \e[1;91mPhase I: \e[1;34mCreating wine-node named: \e[1;96m"$WINE_NODE"\n"

cd "$WINE_NODE"
mkdir bin

echo -e "\n"

###################################
#
# copy wine-prefix [master node] into wine-node + make needed folders
#

echo -e "  \e[1;91mPhase II: \e[1;34mCopying data/files from master-node; \e[1;96m"$MASTER_NODE" \e[1;34minto \e[1;96m"$WINE_NODE"\n" 

cp -r "$CONTAINER"/"$MASTER_NODE"/dosdevices /"$CONTAINER"/"$WINE_NODE"

mkdir "$CONTAINER"/"$WINE_NODE"/drive_c
mkdir "$CONTAINER"/"$WINE_NODE"/drive_c/windows

cp -r "$CONTAINER"/"$MASTER_NODE"/drive_c/windows /"$CONTAINER"/"$WINE_NODE"/drive_c

###################################
#
# remove folders that we plan to symlink to
#

cd "$CONTAINER"/"$WINE_NODE"/drive_c/windows

echo -e "\n"

echo -e "  \e[1;91mPHASE III: \e[1;34mRemoving unwanted duplicate files from wine-node: \e[1;96m"$WINE_NODE"\n"

rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/Installer
rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/mono
rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/temp
rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/winsxs

echo -e "\n"

###################################
#
# Depending what you have installed in your wine-prefix, you may want to rm + symlink other folders;
#
# On x86_64 + wine32/64 mixed prefix + both x86/x64 runtimes, etc -> 92mb per node.

rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/Microsoft.NET
rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/system32/gecko
rm -r "$CONTAINER"/"$WINE_NODE"/drive_c/windows/syswow64/gecko

#
#  SymLink wine-node reg files to master-node? [WARNING: it's possible to blow/screw up up master using a node!]
#

echo -e "  \e[1;91mPhase IV: \e[1;34mMigrating data and symlinks from master-node to wine-node: "$MASTER_NODE" to \e[1;96m"$WINE_NODE"\n"

###################################
#
# Copy Registries, so that no node can alter the master-node's reg files.

cp "$CONTAINER"/"$MASTER_NODE"/user.reg "$CONTAINER"/"$WINE_NODE"/user.reg
cp "$CONTAINER"/"$MASTER_NODE"/system.reg "$CONTAINER"/"$WINE_NODE"/system.reg
cp "$CONTAINER"/"$MASTER_NODE"/userdef.reg "$CONTAINER"/"$WINE_NODE"/userdef.reg

###################################
#
# don't symlink ../drive_c/users - we can symlink ../public [user dir], but for our user;
# Instead, create directories, populate symlink and copy the data per-node.

USER="ninez"

mkdir "$CONTAINER"/"$WINE_NODE"/drive_c/users

ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/users/Public /"$CONTAINER"/"$WINE_NODE"/drive_c/users/Public

cp -R "$CONTAINER"/"$MASTER_NODE"/drive_c/users/"$USER" /"$CONTAINER"/"$WINE_NODE"/drive_c/users

####################################
#
# Remove [copied] /Temp, then symlink to master-node. this temp folder holds installers, etc.

chmod 775 -R "$CONTAINER"/"$WINE_NODE"/drive_c/users/"$USER"/Temp

rm -R "$CONTAINER"/"$WINE_NODE"/drive_c/users/"$USER"/Temp

ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/users/"$USER"/Temp /"$CONTAINER"/"$WINE_NODE"/drive_c/users/"$USER"/Temp

####################################
#
# populate ../windows with symlinks

ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/temp "$CONTAINER"/"$WINE_NODE"/drive_c/windows/temp 
ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/mono "$CONTAINER"/"$WINE_NODE"/drive_c/windows/mono 
ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/Installer "$CONTAINER"/"$WINE_NODE"/drive_c/windows/Installer 
ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/winsxs "$CONTAINER"/"$WINE_NODE"/drive_c/windows/winsxs 

####################################
#
# Depending what you have installed in your wine-prefix, you may want to rm + symlink other folders;
#
# On x86_64 + wine32/64 mixed prefix + both x86/x64 runtimes, etc -> 92mb per node. [without adding the below wine/dll stuff].

ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/winsxs /"$CONTAINER"/"$WINE_NODE"/drive_c/windows/Microsoft.NET
ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/system32/gecko "$CONTAINER"/"$WINE_NODE"/drive_c/windows/system32/gecko
ln -s "$CONTAINER"/"$MASTER_NODE"/drive_c/windows/syswow64/gecko "$CONTAINER"/"$WINE_NODE"/drive_c/windows/syswow64/gecko

echo -e "\n"

cd ..

################################################################################
#
# *** [SPECIAL CASE] Section ***
#
# 1. Create folder/directory structures
# 2. populate with Symlinks to master-node for folders that can be shared from master-node
# 3. copy/duplicate data that cannot be shared between running instances on separate nodes 
#   * One such example here; Guitar Rig takes a lock, but I wanted more than one instance without
#     having multiple installations!
#
# NOTE: x86 and x64 directories may differ - you need to account for this, in this script.

####################################
#
# Special Case DIR variables

PFILES1="AAS"
PFILES2="Applied Acoustics Systems"
PFILES3="Internet Explorer"         
PFILES4="Native Instruments"
PFILES5="REAPER (x64)"              # x64 only
PFILES6="BZEdit1.6.5"               # x86 only
PFILES7=
PFILES8=
PFILES9=

####################################
#
# Create ../Program Files directories
# 

mkdir "$CONTAINER"/"$WINE_NODE"/"$X64"
mkdir "$CONTAINER"/"$WINE_NODE"/"$X86"

####################################
#
# Populate ../Program Files with Symlinks to master-node's ../Program Files
#

# AAS

# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$PFILES1" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$PFILES1"
# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$PFILES1" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$PFILES1"

# Applied Acoustic systems

# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$PFILES2" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$PFILES2"
# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$PFILES2" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$PFILES2"

# Internet explorer

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$PFILES3" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$PFILES3"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$PFILES3" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$PFILES3"

# Native instruments

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$PFILES4" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$PFILES4"

# Reaper

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$PFILES5" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$PFILES5"

# BZEdit 1.6.5

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$PFILES6" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$PFILES6"


####################################
#
# Common Files stuff

CMNFILES="Common Files"

CFILES1="Avid"
CFILES2="Microsoft Shared"
CFILES3="Native Instruments"
CFILES4="Propellerhead Software"    # x64 only
CFILES5="System"                    # x64 only
CFILES6="Digidesign"                # x64 only

#
# Create '../Common Files' Directory.
#

mkdir "$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"
mkdir "$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"

cd "$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"


####################################
#
# Populate '../Common Files' with Symlinks to master-node's '../Common Files'
#

# Avid

# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$CFILES1" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$CFILES1"
# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$CFILES1" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$CFILES1"

# Microsoft Shared

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$CFILES2" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$CFILES2"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$CFILES2" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$CFILES2"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$CFILES4" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$CFILES4"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$CFILES5" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$CFILES5"

# ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$CFILES1" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$CFILES6"

####################################
#
# Special Case: Native Instruments DIR variables [in ../Common files/Native Instruemnts'
#

NI="Native Instruments"

NIFILE1="Absynth 5"           # x64 only
NIFILE2="Battery 4"           # x64 only
NIFILE3="Hardware"            # x64 only
NIFILE4="Helper"              # x64 only
NIFILE5="Guitar Rig 5"        # x64 only + no symlink [need to not share data]
NIFILE6="Kontakt 5"           # x64 only
NIFILE7="Kore 2"           
NIFILE8="Rammfire"            # x64 only
NIFILE9="Service Center"     
NIFILE10="Shared Content"
NIFILE11="Solid Bus Comp FX"  # x64 only
NIFILE12="Solid Dynamics FX"  # x64 only
NIFILE13="Traktors 12"        # x64 only
NIFILE14="FM8"                # x86 only
NIFILE15="Massive"            # x86 only

####################################
#
# Create '../Common Files/Native Instruments' Directory

mkdir "$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"
mkdir "$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"

cd "$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE1" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE1"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE2" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE2"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE3" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE3"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE4" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE4"

# NIFILE5 - aka: Guitar Rig 5 is handled as a [SPECIAL CASE], per-node data handling. 

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE6" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE6"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE9" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE7"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE9" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE7"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE8" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE8"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE9" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE9"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE9" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE9"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE10" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE10"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE10" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE10"

ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE11" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE11"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE12" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE12"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE13" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE13"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE14" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE14"
ln -s "$CONTAINER"/"$MASTER_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE15" /"$CONTAINER"/"$WINE_NODE"/"$X86"/"$CMNFILES"/"$NI"/"$NIFILE15"

####################################
#
# Create Symlink to Guitar Rig 5 data node[s]
#

GR5_CONTAINER="gr5box"
GR5_NODE="GR5node"$NODE""
GR5_SHARED="Guitar Rig 5"

# link GR5node data folders to each node

ln -s "$CONTAINER"/"$GR5_CONTAINER"/"$GR5_NODE" /"$CONTAINER"/"$WINE_NODE"/"$X64"/"$CMNFILES"/"$NI"/"$NIFILE5"

####################################
#
# Say bye, give info, yada yda. exit

echo -e "  \e[1;91mPhase V: \e[1;34mFinished creating wine-node: \e[1;96m"$WINE_NODE"\n\n"

echo -e "  \e[1;92mTo use any particular wine-node that you have created, you must make sure to specify" 
echo -e "  the correct WINEPREFIX of a given node.\n" 

echo -e "  For example: if i had a wine-node named 'node1', i would add to custom/startup script; \n"

echo -e "  #!bin/bash\n"
echo -e "  \e[1;96mexport WINEPREFIX=/winebox/node1"
echo -e "  ...<scripting>...\n"
echo -e "  $ wine foo\n"

echo -e "  \e[1;92mor via commandline;\n"

echo -e "  \e[1;96menv WINEPREFIX=/winebox/node1 foo\n"

echo -e "  \e[1;92mNOTE: you also need to re-create your node's after updating Wine. First "
echo -e "  destroy/delete your existing nodes, then re-run this script.\n"

echo -e "  \e[1;34mdone. bye"

echo -e "  \e[1;37m"
tput setab 0
exit 0
